---

name: Terraform modules testing
on:
  workflow_call:
    inputs:
      AWS_REGION:
        type: string
      TEST_EXTRA_COMMANDS:
        type: string
        required: false
        default: ""
      PRE_PIP_COMMANDS:
        type: string
        required: false
        default: ""
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      RUNNERS_PAT_TOKEN:
        required: false
jobs:
  prepare:
    name: Preparation
    runs-on: ubuntu-latest
    outputs:
      runners: ${{ steps.vars.outputs.github_runners }}
    steps:
      - uses: actions/checkout@v3
      - name: Outputs preparation
        id: vars
        env:
          GH_TOKEN: ${{ secrets.RUNNERS_PAT_TOKEN }}
        run: |
          github_runners='ubuntu-latest'
          runners=$(gh api repos/${{ github.repository }}/actions/runners | jq .total_count || echo 0) && echo $runners
          org_runners=$(gh api /orgs/naviteq/actions/runners | jq .total_count || echo 0) && echo $org_runners
          ([[ "$runners" -gt 0 ]] || [[ "$org_runners" -gt 0 ]]) && github_runners="self-hosted"
          echo "github_runners=${github_runners}" >> $GITHUB_OUTPUT
  format:
    name: Format check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.9
          cli_config_credentials_hostname: 'terraform.naviteq.io'
          cli_config_credentials_token: ${{ secrets.NAVITEQ_TF_TOKEN }}
      - uses: actions/setup-python@v3
        with:
          python-version: '3.9'
      - name: Python format
        uses: psf/black@stable
        with:
          version: 22.6.0
      - name: Terraform Format
        run: terraform fmt --check --recursive --diff
  tflint:
    name: TFLint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v2
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ hashFiles('.tflint.hcl') }}
      - uses: terraform-linters/setup-tflint@v1
        with:
          tflint_version: v0.38.1
      - name: Run TFLint
        run: |

          tflint --init
          tflint -f compact
  security:
    name: Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: TFSec
        uses: aquasecurity/tfsec-action@v1.0.2
        with:
          additional_args: --config-file=./.tfsec.yml
      - name: Run Checkov action
        uses: bridgecrewio/checkov-action@v12.1347.0
        with:
          quiet: true
  test:
    name: Module testing (PyTest)
    concurrency: tf-test-${{ github.ref }}
    runs-on: ${{ needs.prepare.outputs.runners }}
    needs:
      - prepare
      - format
      - tflint
      - security
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.9
          terraform_wrapper: false
      - uses: actions/setup-python@v3
        with:
          python-version: '3.9'
      - uses: syphar/restore-virtualenv@v1
        id: cache-virtualenv
        with:
          requirement_files: tests/requirements.txt
      - uses: syphar/restore-pip-download-cache@v1
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
      - run: eval ${PRE_PIP_COMMANDS}
        if: ${{ inputs.PRE_PIP_COMMANDS }} != ""
        env:
          PRE_PIP_COMMANDS: ${{ inputs.PRE_PIP_COMMANDS }}
      - run: pip install -r tests/requirements.txt
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
      - name: Tests run
        run: |

          # Just for cases when we need to do something before run
          eval ${EXTRA_COMMANDS}
          python -m pytest -vvv
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          AWS_REGION: ${{ inputs.AWS_REGION }}
          EXTRA_COMMANDS: ${{ inputs.TEST_EXTRA_COMMANDS }}
          TF_TOKEN_terraform_naviteq_io:  ${{ secrets.NAVITEQ_TF_TOKEN }}
