---

name: Terraform modules testing
on:
  workflow_call:
    inputs:
      AWS_REGION:
        type: string
      TEST_EXTRA_COMMANDS:
        type: string
        required: false
        default: ""
      PRE_PIP_COMMANDS:
        type: string
        required: false
        default: ""
      EXTRA_ENV_VARS:
        type: string
        required: false
        default: ""
    secrets:
      AWS_IAM_ROLE:
        required: true
      RUNNERS_PAT_TOKEN:
        required: false
      NAVITEQ_TF_TOKEN:
        required: false
jobs:
  format:
    name: Format check
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5
          cli_config_credentials_hostname: 'terraform.naviteq.io'
          cli_config_credentials_token: ${{ secrets.NAVITEQ_TF_TOKEN }}
      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Python format
        uses: psf/black@25.1.0
        with:
          version: 25.1.0
      - name: Terraform Format
        run: terraform fmt --check --recursive --diff
  tflint:
    name: TFLint
    runs-on:
      - terraform
      - aws
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ hashFiles('.tflint.hcl') }}
      - uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.47.0
      - name: Run TFLint
        run: |
          tflint --init
          tflint -f compact
  security:
    runs-on:
      - terraform
      - aws
    env:
      CHECKOV_ENABLE_MODULES_FOREACH_HANDLING: "False"
      CHECKOV_NEW_TF_PARSER: "0"
    steps:
      - uses: actions/checkout@v4
      - name: TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          additional_args: --config-file=./.tfsec.yml
          version: v1.28.1
          github_token: ${{ github.token }}
      - name: Run Checkov action
        uses: bridgecrewio/checkov-action@v12.2455.0
        with:
          quiet: true
  test:
    name: Module testing (PyTest)
    concurrency: tf-test-${{ github.ref }}
    runs-on:
      - terraform
      - aws
    needs:
      - format
      - tflint
      - security
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5
          terraform_wrapper: false
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: syphar/restore-virtualenv@v1
        id: cache-virtualenv
        with:
          requirement_files: tests/requirements.txt
      - uses: syphar/restore-pip-download-cache@v1
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
      - run: eval ${PRE_PIP_COMMANDS}
        if: ${{ inputs.PRE_PIP_COMMANDS }} != ""
        env:
          PRE_PIP_COMMANDS: ${{ inputs.PRE_PIP_COMMANDS }}
      - run: pip install -r tests/requirements.txt
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          role-duration-seconds: 14400
          role-session-name: github-${{ github.repository_id }}-${{ github.triggering_actor }}
          aws-region: ${{ inputs.AWS_REGION }}
      - name: Tests run
        run: |
          if [ -n "${TEST_EXTRA_COMMANDS}" ]; then eval ${TEST_EXTRA_COMMANDS}; fi
          if [ -n "${EXTRA_ENV_VARS}" ]; then export ${EXTRA_ENV_VARS}; fi
          python -m pytest --show-capture=all --log-cli-level=debug -vv
        env:
          TEST_EXTRA_COMMANDS: ${{ inputs.TEST_EXTRA_COMMANDS }}
          EXTRA_ENV_VARS: ${{ inputs.EXTRA_ENV_VARS }}
          TF_TOKEN_terraform_naviteq_io:  ${{ secrets.NAVITEQ_TF_TOKEN }}
